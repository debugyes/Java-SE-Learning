import org.omg.PortableInterceptor.SYSTEM_EXCEPTION;

/*
    数组：存储同一种数据类型的多个元素的容器。

    定义格式：
        A:数据类型[] 数组名；
        B:数据类型 数组名[];

    举例：
        A:int[] a; 定义了一个int类型的数组a变量
        B:int a[]; 定义了一个int类型的a数组变量

    注意：两种定义方法效果可以认为是一样的，都是定义一个int数组，但是念法上有一些区别。推荐使用第一种。

    初始化的方法：
        A:何为初始化：就是为数组开辟内存空间，并为每个数组元素赋值
        B:有几种方式呢？
            a:动态初始化：只指定长度，由系统给出初始化值
            b:静态初始化：给出初始化值，由系统决定长度

    动态初始化的格式：
        数据类型[] 数组名 = new 数据类型[数组长度];
        注意前后两个数据类型要一样。
        数组长度就是数组中元素个数

        举例：
        int[] a = new int[3];

    如何获取数组中的元素呢？
        通过：
            数组名[索引]
            索引其实就是每个元素的编号，从0开始，最大索引是数组的长度-1。



    Java程序为了提高程序的效率，就对数据进行了不同空间的分配。
    具体的是划分为了如下5个空间内存：
    栈：存放的是局部变量
    堆：存放的是所有new出来的东西
    方法区：（面向对象部分详细讲解）
    本地方法区：（和系统相关）
    寄存器：（CPU使用）

    局部变量：在方法中定义中或者方法声明(方法定义)上的变量称为局部变量。
    堆内存的特点：
        A:每一个new出来的东西都有地址值
        B:每个变量都有默认值
            byte, short, int, long 0
            float, double, 0.0
            char '\-u000'
            boolean false
            引用类型 null
        C:使用完成就变成了垃圾，但是并没有立即回收。会在垃圾回收器空闲的时候回收。

    栈内存的特点：栈内存的数据用完（脱离了作用域）就释放
* */
public class Array_1 {
    public static void main(String[] args) {
        //定义一个数组
        //int[] a;
        // Error 变量a尚未初始化
        //System.out.println(a);

        int[] arr = new int[3];
        /*
            =号左边：
                int：说明数组中的元素的数据类型是int类型
                []: 说明这是一个数组
                arr：是数组的名称
            =号右边：
                new：为数组分配内存空间
                int：说明数组中的元素的数据类型是int类型
                []：说明这是一个数组
                3：数组长度，其实也就是数组中的元素个数
         */

        System.out.println(arr);//[I@1b6d3586 内存地址值
        //但是要地址值没有意义，只要数据值
        //其实数组中的每个元素都是有编号的，并且是从0开始。最大编号是数组的长度-1.
        //用数组名和编号的配合，就可以获取数组中指定编号的元素。这个编号的的专业叫法：索引
        //通过数组名访问数据的格式是：数组名[索引]
        System.out.println(arr[0]);//0
        System.out.println(arr[1]);//0
        System.out.println(arr[2]);//0
    }
}
